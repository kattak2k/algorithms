# Each new term in the Fibonacci sequence is generated by adding the previous two terms. By starting with 1 and 2, the first 10 terms will be:
# 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, ...
# By considering the terms in the Fibonacci sequence whose values do not exceed four million, find the sum of the even-valued terms.

def fib_even_sum(maxval)
  totl = []
  fib_arr = []
  (1..maxval).each do |x|

    fib_arr << case x
               when 1..2 # skip 1 & 2
                 x
               else  # sum the previous and last previous value of array
                 last_val = (fib_arr[x - 2] + fib_arr[x - 3])
               end

     break if (last_val  || 0) >= maxval

  end

  #remove the last element of it is greater than the max val
  fib_arr.pop() if fib_arr[-1] >= maxval

  # pick all even numbers
  totl = fib_arr.select(&:even?)

  #find the total sum of all even nos.
  totl.sum
end

# find total sum of 4 million even nos
p fib_even_sum(10)
#p fib_even_sum(4_000_000)
# still need to improve performance
